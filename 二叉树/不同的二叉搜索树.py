#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''
@File    :   不同的二叉搜索树.py
@Time    :   2024/04/29 18:22:33
@Author  :   yangguoli 
@Version :   1.0
@Desc    :   None
给你一个整数 n ，求恰由 n 个节点组成且节点值从 1 到 n 互不相同的 二叉搜索树 有多少种？返回满足题意的二叉搜索树的种数。
'''

# 初始化一个长度为 n + 10 的列表 f，用于存储不同结构的二叉搜索树的数量。列表中的每个元素 f[i] 表示由 i 个节点构成的不同结构的二叉搜索树的数量。
# 初始化 f[0] = 1，表示空树也算一种二叉搜索树，所以只有一种情况。
# 使用双重循环遍历节点个数从 1 到 n，外层循环表示当前节点个数 i，内层循环表示以当前节点个数 i 为根节点，构建不同结构的二叉搜索树。
# 对于当前节点个数 i，内层循环遍历从 1 到 i 的每个数字 j，表示以 j 为根节点，左子树有 j - 1 个节点，右子树有 i - j 个节点。
# 对于每个 j，更新 f[i]，f[j - 1] 表示左子树的数量，f[i - j] 表示右子树的数量，因此 f[i] += f[j - 1] * f[i - j] 表示以 j 为根节点构建的二叉搜索树的数量。
# 最终返回 f[n]，即由 n 个节点构成的不同结构的二叉搜索树的数量。

class Solution:
    def numTrees(self, n: int) -> int:
        f = [0] * (n + 10)
        f[0] = 1
        for i in range(1, n + 1):
            for j in range(1, i + 1):
                f[i] += f[j - 1] * f[i - j]
        return f[n]

